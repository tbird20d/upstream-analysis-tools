#!/usr/bin/env python
#
# commit-report - report information about a set of commits
#  specified by 'git log' arguments
#
# This shows the abbreviated hash, description, author, date and the describe
# string for the commit.  Note that the only reason this isn't just a simple
# 'git log' operation is that you can't get the git-describe string from that.
#
# This script is used primarily to find out when specific patches or groups
# of patches were integrated into Linus Torvalds mainline kernel source tree.
#

import sys
import os
import commands

debug = 0

def usage():
	print """usage: %s <git_log_args>
This program shows information for a selected set of commits
in the current git repository.

Some handy git log args are:
 --author=john.smith
 --grep='qcom'
 v3.4..

 -h        Show this usage
""" % (os.path.basename(sys.argv[0]))
	sys.exit(0)

def dprint(msg):
	global debug

	if debug:
		print msg

def main():
	global debug

	if '-h' in sys.argv:
		usage()
	if '--debug' in sys.argv:
		sys.argv.remove("--debug")
		debug = 1

	git_args = sys.argv[1:]
	git_args_str = " ".join(git_args)

	# gather the commit data
	cmd="git log --all-match --format=format:%%h %s" % git_args_str
	(rcode, result) = commands.getstatusoutput(cmd)

	if not result.strip():
		print "No matches found."
		sys.exit(0)
	
	try:
		for line in result.split("\n"):
			(commit_id) = line.strip()
			dprint("commit_id=%s" % commit_id)
			cmd = "git describe %s" % commit_id
			(rcode, describe_str) = commands.getstatusoutput(cmd)
			describe_str = describe_str.strip()
		
			dprint("describe_str=%s" % describe_str)
			cmd = "git log --format=format:\"%%h|%%ae|%%s\" %s^..%s" % (commit_id, commit_id)
			#print "cmd=", cmd
			(rcode, log_str) = commands.getstatusoutput(cmd)
			log_str = log_str.strip()
			dprint("log_str=%s" % log_str)
			if '\n' not in log_str:
				(hash_str, author, subject) = log_str.split("|", 2)
				print "%-8s | %-25s | %-70s | %s" % (commit_id, author[:25], subject[:70], describe_str)
			else:
				# multi-line - this must be a merge commit
				for l in log_str.split('\n'):
					(hash_str, author, subject) = l.split("|", 2)
					print "%-8s # %-25s # %-70s # %s" % (hash_str, author[:25], subject[:70], describe_str)

	except:
		print "### ERROR parsing 'git log' results.  Results are:"
		#print result
		import traceback
		traceback.print_exc(file=sys.stdout)
		sys.exit(1)


if __name__=="__main__":
	main()
